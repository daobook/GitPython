# SOME DESCRIPTIVE TITLE.
# Copyright (C) Copyright (C) 2008, 2009 Michael Trier and contributors,
# 2010-2015 Sebastian Thiel
# This file is distributed under the same license as the GitPython package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2021.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: GitPython 3.1.24\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-12-16 13:24+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.0\n"

#: ../../source/tutorial.rst:9
msgid "GitPython Tutorial"
msgstr ""

#: ../../source/tutorial.rst:11
msgid ""
"GitPython provides object model access to your git repository. This "
"tutorial is composed of multiple sections, most of which explain a real-"
"life use case."
msgstr ""

#: ../../source/tutorial.rst:13
msgid ""
"All code presented here originated from `test_docs.py <https://github.com"
"/gitpython-developers/GitPython/blob/main/test/test_docs.py>`_ to assure "
"correctness. Knowing this should also allow you to more easily run the "
"code for your own testing purposes. All you need is a developer "
"installation of git-python."
msgstr ""

#: ../../source/tutorial.rst:16
msgid "Meet the Repo type"
msgstr ""

#: ../../source/tutorial.rst:18
msgid ""
"The first step is to create a :class:`git.Repo <git.repo.base.Repo>` "
"object to represent your repository."
msgstr ""

#: ../../source/tutorial.rst:26
msgid ""
"In the above example, the directory ``self.rorepo.working_tree_dir`` "
"equals ``/Users/mtrier/Development/git-python`` and is my working "
"repository which contains the ``.git`` directory. You can also initialize"
" GitPython with a *bare* repository."
msgstr ""

#: ../../source/tutorial.rst:34
msgid ""
"A repo object provides high-level access to your data, it allows you to "
"create and delete heads, tags and remotes and access the configuration of"
" the repository."
msgstr ""

#: ../../source/tutorial.rst:42
msgid ""
"Query the active branch, query untracked files or whether the repository "
"data has been modified."
msgstr ""

#: ../../source/tutorial.rst:50
msgid "Clone from existing repositories or initialize new empty ones."
msgstr ""

#: ../../source/tutorial.rst:58
msgid "Archive the repository contents to a tar file."
msgstr ""

#: ../../source/tutorial.rst:67
msgid "Advanced Repo Usage"
msgstr ""

#: ../../source/tutorial.rst:69
msgid ""
"And of course, there is much more you can do with this type, most of the "
"following will be explained in greater detail in specific tutorials. "
"Don't worry if you don't understand some of these examples right away, as"
" they may require a thorough understanding of gits inner workings."
msgstr ""

#: ../../source/tutorial.rst:71
msgid "Query relevant repository paths ..."
msgstr ""

#: ../../source/tutorial.rst:79
msgid ""
":class:`Heads <git.refs.head.Head>` Heads are branches in git-speak. "
":class:`References <git.refs.reference.Reference>` are pointers to a "
"specific commit or to other references. Heads and :class:`Tags "
"<git.refs.tag.TagReference>` are a kind of references. GitPython allows "
"you to query them rather intuitively."
msgstr ""

#: ../../source/tutorial.rst:87
msgid "You can also create new heads ..."
msgstr ""

#: ../../source/tutorial.rst:95
msgid "... and tags ..."
msgstr ""

#: ../../source/tutorial.rst:103
msgid ""
"You can traverse down to :class:`git objects <git.objects.base.Object>` "
"through references and other objects. Some objects like :class:`commits "
"<git.objects.commit.Commit>` have additional meta-data to query."
msgstr ""

#: ../../source/tutorial.rst:111
msgid ""
":class:`Remotes <git.remote.Remote>` allow to handle fetch, pull and push"
" operations, while providing optional real-time progress information to "
":class:`progress delegates <git.util.RemoteProgress>`."
msgstr ""

#: ../../source/tutorial.rst:119
msgid ""
"The :class:`index <git.index.base.IndexFile>` is also called stage in "
"git-speak. It is used to prepare new commits, and can be used to keep "
"results of merge operations. Our index implementation allows to stream "
"date into the index, which is useful for bare repositories that do not "
"have a working tree."
msgstr ""

#: ../../source/tutorial.rst:127
msgid ""
":class:`Submodules <git.objects.submodule.Submodule>` represent all "
"aspects of git submodules, which allows you query all of their related "
"information, and manipulate in various ways."
msgstr ""

#: ../../source/tutorial.rst:137
msgid "Examining References"
msgstr ""

#: ../../source/tutorial.rst:139
msgid ""
":class:`References <git.refs.reference.Reference>` are the tips of your "
"commit graph from which you can easily examine the history of your "
"project."
msgstr ""

#: ../../source/tutorial.rst:147
msgid ""
":class:`Tags <git.refs.tag.TagReference>` are (usually immutable) "
"references to a commit and/or a tag object."
msgstr ""

#: ../../source/tutorial.rst:155
msgid ""
"A :class:`symbolic reference <git.refs.symbolic.SymbolicReference>` is a "
"special case of a reference as it points to another reference instead of "
"a commit."
msgstr ""

#: ../../source/tutorial.rst:163
msgid "Access the :class:`reflog <git.refs.log.RefLog>` easily."
msgstr ""

#: ../../source/tutorial.rst:172
msgid "Modifying References"
msgstr ""

#: ../../source/tutorial.rst:173
msgid ""
"You can easily create and delete :class:`reference types "
"<git.refs.reference.Reference>` or modify where they point to."
msgstr ""

#: ../../source/tutorial.rst:181
msgid ""
"Create or delete :class:`tags <git.refs.tag.TagReference>` the same way "
"except you may not change them afterwards."
msgstr ""

#: ../../source/tutorial.rst:189
msgid ""
"Change the :class:`symbolic reference "
"<git.refs.symbolic.SymbolicReference>` to switch branches cheaply "
"(without adjusting the index or the working tree)."
msgstr ""

#: ../../source/tutorial.rst:198
msgid "Understanding Objects"
msgstr ""

#: ../../source/tutorial.rst:199
msgid ""
"An Object is anything storable in git's object database. Objects contain "
"information about their type, their uncompressed size as well as the "
"actual data. Each object is uniquely identified by a binary SHA1 hash, "
"being 20 bytes in size, or 40 bytes in hexadecimal notation."
msgstr ""

#: ../../source/tutorial.rst:201
msgid ""
"Git only knows 4 distinct object types being :class:`Blobs "
"<git.objects.blob.Blob>`, :class:`Trees <git.objects.tree.Tree>`, "
":class:`Commits <git.objects.commit.Commit>` and :class:`Tags "
"<git.objects.tag.TagObject>`."
msgstr ""

#: ../../source/tutorial.rst:203
msgid ""
"In GitPython, all objects can be accessed through their common base, can "
"be compared and hashed. They are usually not instantiated directly, but "
"through references or specialized repository functions."
msgstr ""

#: ../../source/tutorial.rst:211
msgid "Common fields are ..."
msgstr ""

#: ../../source/tutorial.rst:219
msgid ""
":class:`Index objects <git.objects.base.IndexObject>` are objects that "
"can be put into git's index. These objects are trees, blobs and "
"submodules which additionally know about their path in the file system as"
" well as their mode."
msgstr ""

#: ../../source/tutorial.rst:227
msgid ""
"Access :class:`blob <git.objects.blob.Blob>` data (or any object data) "
"using streams."
msgstr ""

#: ../../source/tutorial.rst:237
msgid "The Commit object"
msgstr ""

#: ../../source/tutorial.rst:239
msgid ""
":class:`Commit <git.objects.commit.Commit>` objects contain information "
"about a specific commit. Obtain commits using  references as done in "
"`Examining References`_ or as follows."
msgstr ""

#: ../../source/tutorial.rst:241
msgid "Obtain commits at the specified revision"
msgstr ""

#: ../../source/tutorial.rst:249
msgid ""
"Iterate 50 commits, and if you need paging, you can specify a number of "
"commits to skip."
msgstr ""

#: ../../source/tutorial.rst:257
msgid "A commit object carries all sorts of meta-data"
msgstr ""

#: ../../source/tutorial.rst:265
msgid ""
"Note: date time is represented in a ``seconds since epoch`` format. "
"Conversion to human readable form can be accomplished with the various "
"`time module <http://docs.python.org/library/time.html>`_ methods."
msgstr ""

#: ../../source/tutorial.rst:273
msgid "You can traverse a commit's ancestry by chaining calls to ``parents``"
msgstr ""

#: ../../source/tutorial.rst:281
msgid "The above corresponds to ``master^^^`` or ``master~3`` in git parlance."
msgstr ""

#: ../../source/tutorial.rst:284
msgid "The Tree object"
msgstr ""

#: ../../source/tutorial.rst:286
msgid ""
"A :class:`tree <git.objects.tree.Tree>` records pointers to the contents "
"of a directory. Let's say you want the root tree of the latest commit on "
"the master branch"
msgstr ""

#: ../../source/tutorial.rst:294
msgid "Once you have a tree, you can get its contents"
msgstr ""

#: ../../source/tutorial.rst:302
msgid ""
"It is useful to know that a tree behaves like a list with the ability to "
"query entries by name"
msgstr ""

#: ../../source/tutorial.rst:310
msgid ""
"There is a convenience method that allows you to get a named sub-object "
"from a tree with a syntax similar to how paths are written in a posix "
"system"
msgstr ""

#: ../../source/tutorial.rst:318
msgid "You can also get a commit's root tree directly from the repository"
msgstr ""

#: ../../source/tutorial.rst:326
msgid ""
"As trees allow direct access to their intermediate child entries only, "
"use the traverse method to obtain an iterator to retrieve entries "
"recursively"
msgstr ""

#: ../../source/tutorial.rst:334
msgid ""
"If trees return Submodule objects, they will assume that they exist at "
"the current head's commit. The tree it originated from may be rooted at "
"another commit though, that it doesn't know. That is why the caller would"
" have to set the submodule's owning or parent commit using the "
"``set_parent_commit(my_commit)`` method."
msgstr ""

#: ../../source/tutorial.rst:337
msgid "The Index Object"
msgstr ""

#: ../../source/tutorial.rst:338
msgid ""
"The git index is the stage containing changes to be written with the next"
" commit or where merges finally have to take place. You may freely access"
" and manipulate this information using the :class:`IndexFile "
"<git.index.base.IndexFile>` object. Modify the index with ease"
msgstr ""

#: ../../source/tutorial.rst:347
msgid ""
"Create new indices from other trees or as result of a merge. Write that "
"result to a new index file for later inspection."
msgstr ""

#: ../../source/tutorial.rst:356
msgid "Handling Remotes"
msgstr ""

#: ../../source/tutorial.rst:358
msgid ""
":class:`Remotes <git.remote.Remote>` are used as alias for a foreign "
"repository to ease pushing to and fetching from them"
msgstr ""

#: ../../source/tutorial.rst:366
msgid ""
"You can easily access configuration information for a remote by accessing"
" options as if they where attributes. The modification of remote "
"configuration is more explicit though."
msgstr ""

#: ../../source/tutorial.rst:374
msgid ""
"You can also specify per-call custom environments using a new context "
"manager on the Git command, e.g. for using a specific SSH key. The "
"following example works with `git` starting at *v2.3*::"
msgstr ""

#: ../../source/tutorial.rst:380
msgid ""
"This one sets a custom script to be executed in place of `ssh`, and can "
"be used in `git` prior to *v2.3*::"
msgstr ""

#: ../../source/tutorial.rst:386
msgid ""
"Here's an example executable that can be used in place of the "
"`ssh_executable` above:"
msgstr ""

#: ../../source/tutorial.rst:394
msgid ""
"Please note that the script must be executable (i.e. `chomd +x "
"script.sh`). `StrictHostKeyChecking=no` is used to avoid prompts asking "
"to save the hosts key to `~/.ssh/known_hosts`, which happens in case you "
"run this as daemon."
msgstr ""

#: ../../source/tutorial.rst:396
msgid ""
"You might also have a look at `Git.update_environment(...)` in case you "
"want to setup a changed environment more permanently."
msgstr ""

#: ../../source/tutorial.rst:399
msgid "Submodule Handling"
msgstr ""

#: ../../source/tutorial.rst:400
msgid ""
":class:`Submodules <git.objects.submodule.base.Submodule>` can be "
"conveniently handled using the methods provided by GitPython, and as an "
"added benefit, GitPython provides functionality which behave smarter and "
"less error prone than its original c-git implementation, that is "
"GitPython tries hard to keep your repository consistent when updating "
"submodules recursively or adjusting the existing configuration."
msgstr ""

#: ../../source/tutorial.rst:408
msgid ""
"In addition to the query functionality, you can move the submodule's "
"repository to a different path <``move(...)``>, write its configuration "
"<``config_writer().set_value(...).release()``>, update its working tree "
"<``update(...)``>, and remove or add them <``remove(...)``, "
"``add(...)``>."
msgstr ""

#: ../../source/tutorial.rst:412
msgid ""
"If you obtained your submodule object by traversing a tree object which "
"is not rooted at the head's commit, you have to inform the submodule "
"about its actual commit to retrieve the data from by using the "
"``set_parent_commit(...)`` method."
msgstr ""

#: ../../source/tutorial.rst:416
msgid ""
"The special :class:`RootModule <git.objects.submodule.root.RootModule>` "
"type allows you to treat your master repository as root of a hierarchy of"
" submodules, which allows very convenient submodule handling. Its "
"``update(...)`` method is reimplemented to provide an advanced way of "
"updating submodules as they change their values over time. The update "
"method will track changes and make sure your working tree and submodule "
"checkouts stay consistent, which is very useful in case submodules get "
"deleted or added to name just two of the handled cases."
msgstr ""

#: ../../source/tutorial.rst:418
msgid ""
"Additionally, GitPython adds functionality to track a specific branch, "
"instead of just a commit. Supported by customized update methods, you are"
" able to automatically update submodules to the latest revision available"
" in the remote repository, as well as to keep track of changes and "
"movements of these submodules. To use it, set the name of the branch you "
"want to track to the ``submodule.$name.branch`` option of the "
"*.gitmodules*  file, and use GitPython update methods on the resulting "
"repository with the ``to_latest_revision`` parameter turned on. In the "
"latter case, the sha of your submodule will be ignored, instead a local "
"tracking branch will be updated to the respective remote branch "
"automatically, provided there are no local changes. The resulting "
"behaviour is much like the one of svn::externals, which can be useful in "
"times."
msgstr ""

#: ../../source/tutorial.rst:421
msgid "Obtaining Diff Information"
msgstr ""

#: ../../source/tutorial.rst:423
msgid ""
"Diffs can generally be obtained by subclasses of :class:`Diffable "
"<git.diff.Diffable>` as they provide the ``diff`` method. This operation "
"yields a :class:`DiffIndex <git.diff.DiffIndex>` allowing you to easily "
"access diff information about paths."
msgstr ""

#: ../../source/tutorial.rst:425
msgid ""
"Diffs can be made between the Index and Trees, Index and the working "
"tree, trees and trees as well as trees and the working copy. If commits "
"are involved, their tree will be used implicitly."
msgstr ""

#: ../../source/tutorial.rst:433
msgid ""
"The item returned is a DiffIndex which is essentially a list of Diff "
"objects. It provides additional filtering to ease finding what you might "
"be looking for."
msgstr ""

#: ../../source/tutorial.rst:441
msgid ""
"Use the diff framework if you want to implement git-status like "
"functionality."
msgstr ""

#: ../../source/tutorial.rst:443
msgid "A diff between the index and the commit's tree your HEAD points to"
msgstr ""

#: ../../source/tutorial.rst:445
msgid "use ``repo.index.diff(repo.head.commit)``"
msgstr ""

#: ../../source/tutorial.rst:447
msgid "A diff between the index and the working tree"
msgstr ""

#: ../../source/tutorial.rst:449
msgid "use ``repo.index.diff(None)``"
msgstr ""

#: ../../source/tutorial.rst:451
msgid "A list of untracked files"
msgstr ""

#: ../../source/tutorial.rst:453
msgid "use ``repo.untracked_files``"
msgstr ""

#: ../../source/tutorial.rst:456
msgid "Switching Branches"
msgstr ""

#: ../../source/tutorial.rst:457
msgid ""
"To switch between branches similar to ``git checkout``, you effectively "
"need to point your HEAD symbolic reference to the new branch and reset "
"your index and working copy to match. A simple manual way to do it is the"
" following one"
msgstr ""

#: ../../source/tutorial.rst:465
msgid ""
"The previous approach would brutally overwrite the user's changes in the "
"working copy and index though and is less sophisticated than a ``git-"
"checkout``. The latter will generally prevent you from destroying your "
"work. Use the safer approach as follows."
msgstr ""

#: ../../source/tutorial.rst:474
msgid "Initializing a repository"
msgstr ""

#: ../../source/tutorial.rst:476
msgid ""
"In this example, we will initialize an empty repository, add an empty "
"file to the index, and commit the change."
msgstr ""

#: ../../source/tutorial.rst:484
msgid ""
"Please have a look at the individual methods as they usually support a "
"vast amount of arguments to customize their behavior."
msgstr ""

#: ../../source/tutorial.rst:487
msgid "Using git directly"
msgstr ""

#: ../../source/tutorial.rst:488
msgid ""
"In case you are missing functionality as it has not been wrapped, you may"
" conveniently use the :class:`git <git.cmd.Git>` command directly. It is "
"owned by each repository instance."
msgstr ""

#: ../../source/tutorial.rst:496
msgid ""
"The return value will by default be a string of the standard output "
"channel produced by the command."
msgstr ""

#: ../../source/tutorial.rst:498
msgid ""
"Keyword arguments translate to short and long keyword arguments on the "
"command-line. The special notion ``git.command(flag=True)`` will create a"
" flag without value like ``command --flag``."
msgstr ""

#: ../../source/tutorial.rst:501
msgid ""
"If ``None`` is found in the arguments, it will be dropped silently. Lists"
" and tuples passed as arguments will be unpacked recursively to "
"individual arguments. Objects are converted to strings using the "
"``str(...)`` function."
msgstr ""

#: ../../source/tutorial.rst:505
msgid "Object Databases"
msgstr ""

#: ../../source/tutorial.rst:506
msgid ""
":class:`git.Repo <git.repo.base.Repo>` instances are powered by its "
"object database instance which will be used when extracting any data, or "
"when writing new objects."
msgstr ""

#: ../../source/tutorial.rst:508
msgid ""
"The type of the database determines certain performance characteristics, "
"such as the quantity of objects that can be read per second, the resource"
" usage when reading large data files, as well as the average memory "
"footprint of your application."
msgstr ""

#: ../../source/tutorial.rst:511
msgid "GitDB"
msgstr ""

#: ../../source/tutorial.rst:512
msgid ""
"The GitDB is a pure-python implementation of the git object database. It "
"is the default database to use in GitPython 0.3. Its uses less memory "
"when handling huge files, but will be 2 to 5 times slower when extracting"
" large quantities small of objects from densely packed repositories::"
msgstr ""

#: ../../source/tutorial.rst:518
msgid "GitCmdObjectDB"
msgstr ""

#: ../../source/tutorial.rst:519
msgid ""
"The git command database uses persistent git-cat-file instances to read "
"repository information. These operate very fast under all conditions, but"
" will consume additional memory for the process itself. When extracting "
"large files, memory usage will be much higher than the one of the "
"``GitDB``::"
msgstr ""

#: ../../source/tutorial.rst:524
msgid "Git Command Debugging and Customization"
msgstr ""

#: ../../source/tutorial.rst:526
msgid ""
"Using environment variables, you can further adjust the behaviour of the "
"git command."
msgstr ""

#: ../../source/tutorial.rst:528
msgid "**GIT_PYTHON_TRACE**"
msgstr ""

#: ../../source/tutorial.rst:530
msgid "If set to non-0, all executed git commands will be shown as they happen"
msgstr ""

#: ../../source/tutorial.rst:531
msgid ""
"If set to *full*, the executed git command _and_ its entire output on "
"stdout and stderr will be shown as they happen"
msgstr ""

#: ../../source/tutorial.rst:533
msgid ""
"**NOTE**: All logging is outputted using a Python logger, so make sure "
"your program is configured to show INFO-level messages.  If this is not "
"the case, try adding the following to your program::"
msgstr ""

#: ../../source/tutorial.rst:538
msgid "**GIT_PYTHON_GIT_EXECUTABLE**"
msgstr ""

#: ../../source/tutorial.rst:540
msgid ""
"If set, it should contain the full path to the git executable, e.g. "
"*c:\\\\Program Files (x86)\\\\Git\\\\bin\\\\git.exe* on windows or "
"*/usr/bin/git* on linux."
msgstr ""

#: ../../source/tutorial.rst:543
msgid "And even more ..."
msgstr ""

#: ../../source/tutorial.rst:545
msgid ""
"There is more functionality in there, like the ability to archive "
"repositories, get stats and logs, blame, and probably a few other things "
"that were not mentioned here."
msgstr ""

#: ../../source/tutorial.rst:547
msgid ""
"Check the unit tests for an in-depth introduction on how each function is"
" supposed to be used."
msgstr ""

